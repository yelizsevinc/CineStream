@page "/platforms/{PlatformId}/add-show"
@using Microsoft.EntityFrameworkCore
@using CineStream.Data

@inject IDbContextFactory<CineStreamContext> DbFactory
@inject NavigationManager NavManager

<PageTitle>Add Show</PageTitle>

<h1><i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Add Show</h1>

<div class="clr-row">
    <div class="clr-col-lg-6 clr-col-12">
        <Card>
            <CardBody>
                <CardBlock>
                    <Form Model="selectedShow" OnValidSubmit="HandleValidSubmit" Layout="FormLayout.Vertical">
                        <DataAnnotationsValidator />

                        <InputCombobox Label="Select Show" TItem="Show" Items="@availableShows"
                            @bind-SelectedItem="selectedShow" ItemToText="o => o?.Title"
                            ValidationFor="() => selectedShow" HelpText="Please select a show.">
                            <ItemTemplate Context="show">
                                @show.Title
                            </ItemTemplate>
                        </InputCombobox>

                        <Button class="mt-3" Variant="Primary" type="submit">Submit</Button>
                    </Form>
                </CardBlock>
            </CardBody>
        </Card>
    </div>
</div>

@code {
    [Parameter] public string? PlatformId { get; set; }
    private ICollection<Show>? availableShows { get; set; }
    private Show selectedShow = new Show();

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableShowsAsync();
    }

    private async Task LoadAvailableShowsAsync()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            var allShows = await context.Shows!.ToListAsync();
            var platformShows = await context.PlatformShows!
            .Where(ps => ps.PlatformId.ToString() == PlatformId)
            .Select(ps => ps.ShowId)
            .ToListAsync();

            availableShows = allShows.Where(show => !platformShows.Contains(show.ShowId)).ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading shows: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            var platformShow = new PlatformShow
                {
                    PlatformId = int.Parse(PlatformId ?? "0"),
                    ShowId = selectedShow.ShowId,
                    AddedToPlatformDate = DateTime.Now
                };

            context.PlatformShows?.Add(platformShow);
            await context.SaveChangesAsync();
            NavManager.NavigateTo($"/platforms/{PlatformId}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error adding show to platform: {ex.Message}");
        }
    }
}