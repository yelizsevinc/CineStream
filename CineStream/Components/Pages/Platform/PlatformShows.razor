@page "/platforms/{PlatformId}/shows"
@using Microsoft.EntityFrameworkCore
@using CineStream.Data

@inject IDbContextFactory<CineStreamContext> DbFactory

<PageTitle>Shows</PageTitle>

@if (platform != null && platform.Name != null)
{
    <h1><i class="bi bi-camera-reels-fill" aria-hidden="true"></i> Shows of @platform.Name</h1>
}

@if (platformShows != null)
{
    <Datagrid Items="platformShows">
    <DatagridColumn Title="ShowId" TRowData="PlatformShowDetails" Field="c => c.ShowId.ToString()" CanSort="true"
        CanFilter="true" FilterImmediately="true" />
    <DatagridColumn Title="Title" TRowData="PlatformShowDetails" Field="c => c.Title" CanSort="true" CanFilter="true"
        FilterImmediately="true" />
    <DatagridColumn Title="ReleaseDate" TRowData="PlatformShowDetails" Field="c => c.ReleaseDate.ToString()"
        CanSort="true" CanFilter="true" FilterImmediately="true" />
    <DatagridColumn Title="CreatedAt" TRowData="PlatformShowDetails" Field="c => c.CreatedAt.ToString()" CanSort="true"
        CanFilter="true" FilterImmediately="true" />
    <DatagridColumn Title="AddedToPlatformDate" TRowData="PlatformShowDetails"
        Field="c => c.AddedToPlatformDate.ToString()" CanSort="true" CanFilter="true" FilterImmediately="true" />
</Datagrid>
}

@code {
    [Parameter] public string? PlatformId { get; set; }
    private Platform? platform { get; set; }
    private ICollection<PlatformShow>? platformShowEntities { get; set; }
    private ICollection<PlatformShowDetails>? platformShows { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            await LoadPlatformDataAsync(context);
            await LoadPlatformShowsAsync(context);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading platform data: {ex.Message}");
        }
    }

    private async Task LoadPlatformDataAsync(CineStreamContext context)
    {
        platform = await context.Platforms!.FirstOrDefaultAsync(c => c.PlatformId.ToString() == PlatformId);

    }

    private async Task LoadPlatformShowsAsync(CineStreamContext context)
    {
        if (platform == null) return;

        platformShows = new List<PlatformShowDetails>();
        platformShowEntities = await context.PlatformShows!.Where(c => c.PlatformId.ToString() == PlatformId).ToListAsync();

        foreach (var platformShow in platformShowEntities)
        {
            var show = await context.Shows!.FirstOrDefaultAsync(u => u.ShowId == platformShow.ShowId);
            if (show != null)
            {
                var platformShowDetails = new PlatformShowDetails
                    {
                        ShowId = show.ShowId,
                        Title = show.Title,
                        ReleaseDate = show.ReleaseDate,
                        CreatedAt = show.CreatedAt,
                        AddedToPlatformDate = platformShow.AddedToPlatformDate
                    };
                platformShows.Add(platformShowDetails);
            }
        }
    }

    private class PlatformShowDetails
    {
        public int ShowId { get; set; }
        public string? Title { get; set; }
        public DateTime? ReleaseDate { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? AddedToPlatformDate { get; set; }
    }
}
