@page "/platforms/{PlatformId}/users"
@using Microsoft.EntityFrameworkCore
@using CineStream.Data

@inject IDbContextFactory<CineStreamContext> DbFactory

<PageTitle>Users</PageTitle>

@if (platform != null && platform.Name != null)
{
    <h1><i class="bi bi-people-fill" aria-hidden="true"></i> Users of @platform.Name</h1>
}

@if (platformUsers != null)
{
    <Datagrid Items="platformUsers">
    <DatagridColumn Title="UserId" TRowData="PlatformUserDetails" Field="c => c.UserId.ToString()" CanSort="true"
        CanFilter="true" FilterImmediately="true" />
    <DatagridColumn Title="Username" TRowData="PlatformUserDetails" Field="c => c.Username" CanSort="true"
        CanFilter="true" FilterImmediately="true" />
    <DatagridColumn Title="Email" TRowData="PlatformUserDetails" Field="c => c.Email" CanSort="true" CanFilter="true"
        FilterImmediately="true" />
    <DatagridColumn Title="SubscriptionDate" TRowData="PlatformUserDetails" Field="c => c.SubscriptionDate.ToString()"
        CanSort="true" CanFilter="true" FilterImmediately="true" />
</Datagrid>
}

@code {
    [Parameter] public string? PlatformId { get; set; }
    private Platform? platform { get; set; }
    private ICollection<PlatformUser>? platformUserEntities { get; set; }
    private ICollection<PlatformUserDetails>? platformUsers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            await LoadPlatformDataAsync(context);
            await LoadPlatformUsersAsync(context);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading platform data: {ex.Message}");
        }
    }

    private async Task LoadPlatformDataAsync(CineStreamContext context)
    {
        platform = await context.Platforms!.FirstOrDefaultAsync(c => c.PlatformId.ToString() == PlatformId);
    }

    private async Task LoadPlatformUsersAsync(CineStreamContext context)
    {
        if (platform == null) return;

        platformUsers = new List<PlatformUserDetails>();
        platformUserEntities = await context.PlatformUsers!.Where(c => c.PlatformId.ToString() == PlatformId).ToListAsync();

        foreach (var platformUser in platformUserEntities)
        {
            var user = await context.Users!.FirstOrDefaultAsync(u => u.UserId == platformUser.UserId);
            if (user != null)
            {
                var platformUserDetails = new PlatformUserDetails
                    {
                        UserId = user.UserId,
                        Username = user.Username,
                        Email = user.Email,
                        SubscriptionDate = platformUser.SubscriptionDate
                    };
                platformUsers.Add(platformUserDetails);
            }
        }
    }

    private class PlatformUserDetails
    {
        public int UserId { get; set; }
        public string? Username { get; set; }
        public string? Email { get; set; }
        public DateTime? SubscriptionDate { get; set; }
    }
}