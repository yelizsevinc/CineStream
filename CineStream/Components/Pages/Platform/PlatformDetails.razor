@page "/platforms/{PlatformId}"
@using Microsoft.EntityFrameworkCore
@using CineStream.Data

@inject IDbContextFactory<CineStreamContext> DbFactory

<PageTitle>Platform</PageTitle>

@if (platform != null && platform.Name != null)
{
    <h1><i class="bi bi-tv-fill" aria-hidden="true"></i> @platform.Name</h1>

    <div class="clr-row">
    <div class="clr-col-12">
        <Card>
            <CardHeader>
                <i class="bi bi-info-circle-fill" aria-hidden="true"></i> Details
            </CardHeader>
            <CardBody>
                <CardBlock>
                    <CardText>
                        @if (platform.Details != null)
                            {
                                @platform.Details
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
            </Card>
        </div>
        <div class="clr-col-lg-6 clr-col-12">
            <Card>
                <CardHeader>
                    <NavLink href=@($"platforms/{PlatformId}/shows")><i class="bi bi-camera-reels-fill"
                            aria-hidden="true"></i>
                        Shows</NavLink>
                </CardHeader>
                <CardBody>
                    <CardBlock>
                        <CardText>
                            @if (platformShows != null)
                            {
                                @foreach (var show in platformShows)
                                {
                                    <ul>
                                        <li>@show.Title</li>
                                    </ul>
                                }
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
                <CardFooter>
                    <NavLink href=@($"platforms/{PlatformId}/add-show")>
                        <Button Variant="Primary">
                            <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Add Show
                        </Button>
                    </NavLink>
                </CardFooter>
            </Card>
        </div>
        <div class="clr-col-lg-6 clr-col-12">
            <Card>
                <CardHeader>
                    <NavLink href=@($"platforms/{PlatformId}/users")><i class="bi bi-people-fill" aria-hidden="true"></i>
                        Users
                    </NavLink>
                </CardHeader>
                <CardBody>
                    <CardBlock>
                        <CardText>
                            @if (platformUsers != null)
                            {
                                @foreach (var user in platformUsers)
                                {
                                    <ul>
                                        <li>@user.Username</li>
                                    </ul>
                                }
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
                <CardFooter>
                    <NavLink href=@($"platforms/{PlatformId}/add-user")>
                        <Button Variant="Primary">
                            <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Add User
                        </Button>
                    </NavLink>
                </CardFooter>
            </Card>
        </div>
    </div>
}

@code
{
    [Parameter] public string? PlatformId { get; set; }
    private Platform? platform { get; set; }
    private ICollection<User> platformUsers = new List<User>();
    private ICollection<Show> platformShows = new List<Show>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            await LoadPlatformDetailsAsync(context);
            await LoadPlatformShowsAsync(context);
            await LoadPlatformUsersAsync(context);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading platform data: {ex.Message}");
        }
    }

    private async Task LoadPlatformDetailsAsync(CineStreamContext context)
    {
        platform = await context.Platforms!.FirstOrDefaultAsync(c => c.PlatformId.ToString() == PlatformId);
    }

    private async Task LoadPlatformUsersAsync(CineStreamContext context)
    {
        if (platform == null) return;

        var platformUsersList = await context.PlatformUsers!
        .Where(c => c.PlatformId == platform.PlatformId)
        .ToListAsync();

        foreach (var platformUser in platformUsersList)
        {
            var user = await context.Users!.FirstOrDefaultAsync(c => c.UserId == platformUser.UserId);
            if (user != null) platformUsers.Add(user);
        }
    }

    private async Task LoadPlatformShowsAsync(CineStreamContext context)
    {
        if (platform == null) return;

        var platformShowsList = await context.PlatformShows!
        .Where(c => c.PlatformId == platform.PlatformId)
        .ToListAsync();

        foreach (var platformShow in platformShowsList)
        {
            var show = await context.Shows!.FirstOrDefaultAsync(c => c.ShowId == platformShow.ShowId);
            if (show != null) platformShows.Add(show);
        }
    }
}