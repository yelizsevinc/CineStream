@page "/users/{UserId}/shows"
@using Microsoft.EntityFrameworkCore
@using CineStream.Data

@inject IDbContextFactory<CineStreamContext> DbFactory

<PageTitle>Shows</PageTitle>

@if ((user != null) && (user.Username != null))
{
    <h1><i class="bi bi-camera-reels-fill" aria-hidden="true"></i> Shows of @user.Username</h1>
}

@if (userShows != null)
{
    <Datagrid Items="userShows">
    <DatagridColumn Title="ShowId" TRowData="UserShowDetails" Field="c => c.ShowId.ToString()" CanSort="true"
        CanFilter="true" FilterImmediately="true" />
    <DatagridColumn Title="Title" TRowData="UserShowDetails" Field="c => c.Title" CanSort="true" CanFilter="true"
        FilterImmediately="true" />
    <DatagridColumn Title="ReleaseDate" TRowData="UserShowDetails" Field="c => c.ReleaseDate.ToString()" CanSort="true"
        CanFilter="true" FilterImmediately="true" />
    <DatagridColumn Title="Watched" TRowData="UserShowDetails" Field="c => c.Watched.ToString()" CanSort="true"
        CanFilter="true" FilterImmediately="true" />
    <DatagridColumn Title="CreatedAt" TRowData="UserShowDetails" Field="c => c.CreatedAt.ToString()" CanSort="true"
        CanFilter="true" FilterImmediately="true" />
</Datagrid>
}

@code
{
    [Parameter] public string? UserId { get; set; }
    private User? user { get; set; }
    private ICollection<UserShow>? userShowEntities { get; set; }
    private ICollection<UserShowDetails>? userShows { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            await LoadUserDataAsync(context);
            await LoadUserShowsAsync(context);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading user data: {ex.Message}");
        }
    }

    private async Task LoadUserDataAsync(CineStreamContext context)
    {
        user = await context.Users!.FirstOrDefaultAsync(c => c.UserId.ToString() == UserId);
    }

    private async Task LoadUserShowsAsync(CineStreamContext context)
    {
        if (user == null) return;

        userShows = new List<UserShowDetails>();
        userShowEntities = await context.UserShows!.Where(c => c.UserId.ToString() == UserId).ToListAsync();

        foreach (var userShow in userShowEntities)
        {
            var show = await context.Shows!.FirstOrDefaultAsync(u => u.ShowId == userShow.ShowId);
            if (show != null)
            {
                var userShowDetails = new UserShowDetails
                    {
                        ShowId = show.ShowId,
                        Title = show.Title,
                        ReleaseDate = show.ReleaseDate,
                        CreatedAt = show.CreatedAt,
                    };
                userShows.Add(userShowDetails);
            }
        }
    }

    private class UserShowDetails
    {
        public int ShowId { get; set; }
        public string? Title { get; set; }
        public DateTime? ReleaseDate { get; set; }
        public bool? Watched { get; set; }
        public DateTime? CreatedAt { get; set; }
    }
}