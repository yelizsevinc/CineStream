@page "/users/{UserId}"
@using Microsoft.EntityFrameworkCore
@using CineStream.Data

@inject IDbContextFactory<CineStreamContext> DbFactory

<PageTitle>User</PageTitle>

@if ((user != null) && (user.Username != null))
{
    <h1><i class="bi bi-camera-reels-fill" aria-hidden="true"></i> @user.Username</h1>

    <div class="clr-row">
    <div class="clr-col-12">
        <Card>
            <CardHeader>
                <i class="bi bi-info-circle-fill" aria-hidden="true"></i> Details
            </CardHeader>
            <CardBody>
                <CardBlock>
                    <CardText>
                        @if (user.Details != null)
                            {
                                @user.Details
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
            </Card>
        </div>
        <div class="clr-col-lg-6 clr-col-12">
            <Card>
                <CardHeader>
                    <NavLink href=@($"users/{UserId}/shows")><i class="bi bi-camera-reels-fill" aria-hidden="true"></i>
                        Shows</NavLink>
                </CardHeader>
                <CardBody>
                    <CardBlock>
                        <CardText>
                            @if (userShows != null)
                            {
                                <ul>
                                    @foreach (var userShow in userShows)
                                    {
                                        <li>@userShow?.Title</li>
                                    }
                                </ul>
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
                <CardFooter>
                    <NavLink href=@($"users/{UserId}/add-show")>
                        <Button Variant="Primary">
                            <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Add Show
                        </Button>
                    </NavLink>
                </CardFooter>
            </Card>
        </div>
        <div class="clr-col-lg-6 clr-col-12">
            <Card>
                <CardHeader>
                    <i class="bi bi-tv-fill" aria-hidden="true"></i> Platforms
                </CardHeader>
                <CardBody>
                    <CardBlock>
                        <CardText>
                            @if (userPlatforms != null)
                            {
                                <ul>
                                    @foreach (var userPlatform in userPlatforms)
                                    {
                                        <li>@userPlatform?.Name</li>
                                    }
                                </ul>
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
                <CardFooter>
                    <NavLink href=@($"users/{UserId}/add-platform")>
                        <Button Variant="Primary">
                            <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Add Platform
                        </Button>
                    </NavLink>
                </CardFooter>
            </Card>
        </div>
    </div>
}

@code
{
    [Parameter] public string? UserId { get; set; }
    private User? user { get; set; }
    private ICollection<Platform> userPlatforms = new List<Platform>();
    private ICollection<Show> userShows = new List<Show>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            await LoadUserDetailsAsync(context);
            await LoadUserPlatformsAsync(context);
            await LoadUserShowsAsync(context);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading user data: {ex.Message}");
        }
    }

    private async Task LoadUserDetailsAsync(CineStreamContext context)
    {
        user = await context.Users!.FirstOrDefaultAsync(c => c.UserId.ToString() == UserId);
    }

    private async Task LoadUserPlatformsAsync(CineStreamContext context)
    {
        if (user == null) return;

        var userPlatformsList = await context.PlatformUsers!.Where(c => c.UserId == user.UserId).ToListAsync();

        foreach (var userPlatform in userPlatformsList)
        {
            var platform = await context.Platforms!.FirstOrDefaultAsync(c => c.PlatformId == userPlatform.PlatformId);
            if (platform != null) userPlatforms.Add(platform);
        }
    }

    private async Task LoadUserShowsAsync(CineStreamContext context)
    {
        if (user == null) return;

        var userShowsList = await context.UserShows!.Where(c => c.UserId == user.UserId).ToListAsync();

        foreach (var userShow in userShowsList)
        {
            var show = await context.Shows!.FirstOrDefaultAsync(c => c.ShowId == userShow.ShowId);
            if (show != null) userShows.Add(show);
        }

    }
}