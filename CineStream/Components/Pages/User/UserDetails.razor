@page "/users/{UserId}"
@using Microsoft.EntityFrameworkCore
@using CineStream.Data

@inject IDbContextFactory<CineStreamContext> DbFactory
@inject NavigationManager NavManager

<PageTitle>User</PageTitle>

@if ((user != null) && (user.Username != null))
{
    <h1><i class="bi bi-camera-reels-fill" aria-hidden="true"></i> @user.Username</h1>

    <div class="clr-row">
    <div class="clr-col-12">
        <Card>
            <CardHeader>
                <i class="bi bi-info-circle-fill" aria-hidden="true"></i> Details
            </CardHeader>
            <CardBody>
                <CardBlock>
                    <CardText>
                        @if (user.Details != null)
                            {
                                @user.Details
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
            </Card>
        </div>
        <div class="clr-col-lg-6 clr-col-12">
            <Card>
                <CardHeader>
                    <NavLink href=@($"users/{UserId}/shows")><i class="bi bi-camera-reels-fill" aria-hidden="true"></i>
                        Shows</NavLink>
                </CardHeader>
                <CardBody>
                    <CardBlock>
                        <CardText>
                            @if (userShows != null)
                            {
                                <ul>
                                    @foreach (var show in userShows)
                                    {
                                        @if (show.Title != null)
                                        {
                                            <li class=my-1>
                                                <Button Icon="times" Variant="Danger" OnClick="@(e => RemoveShow(show.Title))"></Button>
                                                @show.Title
                                            </li>
                                        }
                                    }
                                </ul>
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
                <CardFooter>
                    <NavLink href=@($"users/{UserId}/add-show")>
                        <Button Variant="Success">
                            <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Add Show
                        </Button>
                    </NavLink>
                </CardFooter>
            </Card>
        </div>
        <div class="clr-col-lg-6 clr-col-12">
            <Card>
                <CardHeader>
                    <i class="bi bi-tv-fill" aria-hidden="true"></i> Platforms
                </CardHeader>
                <CardBody>
                    <CardBlock>
                        <CardText>
                            @if (userPlatforms != null)
                            {
                                <ul>
                                    @foreach (var platform in userPlatforms)
                                    {
                                        @if (platform.Name != null)
                                        {
                                            <li class=my-1>
                                                <Button Icon="times" Variant="Danger"
                                                    OnClick="@(e => RemovePlatform(platform.Name))"></Button>
                                                @platform.Name
                                            </li>
                                        }
                                    }
                                </ul>
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
                <CardFooter>
                    <NavLink href=@($"users/{UserId}/add-platform")>
                        <Button Variant="Success">
                            <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Add Platform
                        </Button>
                    </NavLink>
                </CardFooter>
            </Card>
        </div>
        <div class="clr-col-12">
            <Card>
                <CardHeader>
                    <i class="bi bi-info-circle-fill" aria-hidden="true"></i> Danger Zone
                </CardHeader>
                <CardBody>
                    <CardBlock>
                        <CardText>
                            Do you want to delete user?
                        </CardText>
                    </CardBlock>
                </CardBody>
                <CardFooter>
                    <Button Variant="Danger" OnClick="e => isModalVisible = true">
                        <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Delete User
                    </Button>
                </CardFooter>
            </Card>
        </div>
    </div>

    <Modal @bind-Open="isModalVisible" Size="ModalSize.Small">
    <ModalTitle>Are you sure?</ModalTitle>
    <ModalFooter>
        <Button Variant="Danger" OnClick="DeleteUserAsync">Delete</Button>
        <Button Variant="Outline" OnClick="e => isModalVisible = false">Cancel</Button>
    </ModalFooter>
</Modal>
}

@code
{
    [Parameter] public string? UserId { get; set; }
    private User? user { get; set; }
    private ICollection<Platform> userPlatforms = new List<Platform>();
    private ICollection<Show> userShows = new List<Show>();
    private bool isModalVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            await LoadUserDetailsAsync(context);
            await LoadUserPlatformsAsync(context);
            await LoadUserShowsAsync(context);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading user data: {ex.Message}");
        }
    }

    private async Task LoadUserDetailsAsync(CineStreamContext context)
    {
        user = await context.Users!.FirstOrDefaultAsync(c => c.UserId.ToString() == UserId);
    }

    private async Task LoadUserPlatformsAsync(CineStreamContext context)
    {
        if (user == null) return;

        var userPlatformsList = await context.PlatformUsers!.Where(c => c.UserId == user.UserId).ToListAsync();

        foreach (var userPlatform in userPlatformsList)
        {
            var platform = await context.Platforms!.FirstOrDefaultAsync(c => c.PlatformId == userPlatform.PlatformId);
            if (platform != null) userPlatforms.Add(platform);
        }
    }

    private async Task LoadUserShowsAsync(CineStreamContext context)
    {
        if (user == null) return;

        var userShowsList = await context.UserShows!.Where(c => c.UserId == user.UserId).ToListAsync();

        foreach (var userShow in userShowsList)
        {
            var show = await context.Shows!.FirstOrDefaultAsync(c => c.ShowId == userShow.ShowId);
            if (show != null) userShows.Add(show);
        }

    }

    private async Task DeleteUserAsync()
    {
        if (user == null) return;

        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            // Delete all user shows of this user
            var userShowsList = await context.UserShows!.Where(c => c.UserId == user.UserId).ToListAsync();
            context.UserShows!.RemoveRange(userShowsList);
            // Delete all user platforms of this user
            var userPlatformsList = await context.PlatformUsers!.Where(c => c.UserId == user.UserId).ToListAsync();
            context.PlatformUsers!.RemoveRange(userPlatformsList);
            // Delete the user
            context.Users!.Remove(user);
            await context.SaveChangesAsync();
            NavManager.NavigateTo("/users");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting user: {ex.Message}");
        }
    }

    private async Task RemovePlatform(string platformName)
    {
        // Remove platform from user
        using var context = await DbFactory.CreateDbContextAsync();
        var platform = await context.Platforms!.FirstOrDefaultAsync(c => c.Name == platformName);
        if (platform == null || user == null) return;
        var userPlatform = await context.PlatformUsers!.FirstOrDefaultAsync(c => c.PlatformId == platform.PlatformId && c.UserId
        == user.UserId);
        if (userPlatform == null) return;
        context.PlatformUsers!.Remove(userPlatform);
        await context.SaveChangesAsync();
        // Reload user platforms
        userPlatforms.Clear();
        await LoadUserPlatformsAsync(context);
    }

    private async Task RemoveShow(string showTitle)
    {
        // Remove show from user
        using var context = await DbFactory.CreateDbContextAsync();
        var show = await context.Shows!.FirstOrDefaultAsync(c => c.Title == showTitle);
        if (show == null || user == null) return;
        var userShow = await context.UserShows!.FirstOrDefaultAsync(c => c.ShowId == show.ShowId && c.UserId == user.UserId);
        if (userShow == null) return;
        context.UserShows!.Remove(userShow);
        await context.SaveChangesAsync();
        // Reload user shows
        userShows.Clear();
        await LoadUserShowsAsync(context);
    }
}
