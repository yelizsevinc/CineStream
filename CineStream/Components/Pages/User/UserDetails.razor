@page "/users/{UserId}"
@using Microsoft.EntityFrameworkCore
@using CineStream.Data

@inject IDbContextFactory<CineStreamContext> DbFactory

<PageTitle>User</PageTitle>

@if ((appUser != null) && (appUser.Username != null) && (appUser.Details != null))
{
    <h1><i class="bi bi-camera-reels-fill" aria-hidden="true"></i> @appUser.Username</h1>

    <div class="clr-row">
    <div class="clr-col-12">
        <Card>
            <CardHeader>
                <i class="bi bi-info-circle-fill" aria-hidden="true"></i> Details
            </CardHeader>
            <CardBody>
                <CardBlock>
                    <CardText>
                        @appUser.Details
                    </CardText>
                </CardBlock>
            </CardBody>
        </Card>
    </div>
    <div class="clr-col-lg-6 clr-col-12">
        <Card>
            <CardHeader>
                <NavLink href=@($"users/{UserId}/shows")><i class="bi bi-camera-reels-fill" aria-hidden="true"></i>
                    Shows</NavLink>
            </CardHeader>
            <CardBody>
                <CardBlock>
                    <CardText>
                        @if (appUserShows != null)
                            {
                                @foreach (var appUserShow in appUserShows)
                                {
                                    <ul>
                                        <li>@appUserShow?.Title</li>
                                    </ul>
                                }
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
                <CardFooter>
                    <NavLink href=@($"users/{UserId}/add-show")>
                        <Button Variant="Primary">
                            <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Add Show
                        </Button>
                    </NavLink>
                </CardFooter>
            </Card>
        </div>
        <div class="clr-col-lg-6 clr-col-12">
            <Card>
                <CardHeader>
                    <NavLink href=@($"platforms")><i class="bi bi-tv-fill" aria-hidden="true"></i> Platforms</NavLink>
    </CardHeader>
                    <CardBody>
                    <CardBlock>
                        <CardText>
                            @if (appUserPlatforms != null)
                {
                    @foreach (var appUserPlatform in appUserPlatforms)
                    {
                                        <ul>
                                            <li>@appUserPlatform?.Name</li>
                                        </ul>
                    }
                }
                            </CardText>
                        </CardBlock>
                    </CardBody>
                <CardFooter>
                    <NavLink href=@($"users/{UserId}/add-platform")>
                        <Button Variant="Primary">
                            <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Add Platform
                        </Button>
                    </NavLink>
                </CardFooter>
            </Card>
        </div>
    </div>
}

@code
{
    [Parameter] public string? UserId { get; set; }
    private User? appUser { get; set; }
    private ICollection<Platform> appUserPlatforms = new List<Platform>();
    private ICollection<Show> appUserShows = new List<Show>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        appUser = await context.Users!.FirstOrDefaultAsync(c => c.UserId.ToString() == UserId);
        if (appUser != null)
        {
            var platformUsers = await context.PlatformUsers!.Where(c => c.UserId == appUser.UserId).ToListAsync();

            foreach (var platformUser in platformUsers)
            {
                var platform = await context.Platforms!.FirstOrDefaultAsync(c => c.PlatformId == platformUser.PlatformId);
                if (platform != null) appUserPlatforms.Add(platform);

            }

            var showUsers = await context.UserShows!.Where(c => c.UserId == appUser.UserId).ToListAsync();

            foreach (var showUser in showUsers)
            {
                var show = await context.Shows!.FirstOrDefaultAsync(c => c.ShowId == showUser.ShowId);
                if (show != null) appUserShows.Add(show);
            }
        }
    }
}