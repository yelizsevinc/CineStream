@page "/shows"
@using Microsoft.EntityFrameworkCore
@using CineStream.Data

@inject IDbContextFactory<CineStreamContext> DbFactory

<PageTitle>Shows</PageTitle>

<h1><i class="bi bi-camera-reels-fill" aria-hidden="true"></i> Shows</h1>

<Tabs>
    <Tab>
        <Header>Shows</Header>
        <ChildContent>
            <NavLink href="/shows/new">
                <Button Variant="Success" class="my-2">
                    <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> New Show
                </Button>
            </NavLink>
            @if (shows != null)
            {
                <Datagrid Items="shows">
                    <DatagridColumn Title="ShowId" TRowData="Show" Field="c => c.ShowId" CanSort="true" CanFilter="true"
                        FilterImmediately="true" />
                    <DatagridColumn Title="Title" TRowData="Show" Field="c => c.Title" CanSort="true" CanFilter="true"
                        FilterImmediately="true" />
                    <DatagridColumn Title="ReleaseDate" TRowData="Show" Field="c => c.ReleaseDate.ToString()" CanSort="true"
                        CanFilter="true" FilterImmediately="true" />
                    <DatagridColumn Title="CreatedAt" TRowData="Show" Field="c => c.CreatedAt.ToString()" CanSort="true"
                        CanFilter="true" FilterImmediately="true" />
                    <DatagridColumn Title="Details" TRowData="Show">
                        <a href="@($"/shows/{@context?.ShowId}")" class="btn btn-success"><i class="bi bi-camera-reels-fill"
                                aria-hidden="true"></i> Details</a>
                    </DatagridColumn>
                </Datagrid>
            }
        </ChildContent>
    </Tab>
</Tabs>

@code {
    private ICollection<Show>? shows;

    protected override async Task OnInitializedAsync()
    {
        await LoadShowsAsync();
    }

    private async Task LoadShowsAsync()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            shows = await context.Shows!.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading shows: {ex.Message}");
        }
    }
}