@page "/shows/{ShowId}"
@using Microsoft.EntityFrameworkCore
@using CineStream.Data

@inject IDbContextFactory<CineStreamContext> DbFactory
@inject NavigationManager NavManager

<PageTitle>Show</PageTitle>

@if (show != null && show.Title != null)
{
    <h1><i class="bi bi-camera-reels-fill" aria-hidden="true"></i> @show.Title</h1>

    <div class="clr-row">
    <div class="clr-col-12">
        <Card>
            <CardHeader>
                <i class="bi bi-info-circle-fill" aria-hidden="true"></i> Details
            </CardHeader>
            <CardBody>
                <CardBlock>
                    <CardText>
                        @if (show.Details != null)
                            {
                                @show.Details
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
            </Card>
        </div>
        <div class="clr-col-lg-6 clr-col-12">
            <Card>
                <CardHeader>
                    <i class="bi bi-tv-fill" aria-hidden="true"></i> Platforms
                </CardHeader>
                <CardBody>
                    <CardBlock>
                        <CardText>
                            @if (showPlatforms != null)
                            {
                                <ul>
                                    @foreach (var platform in showPlatforms)
                                    {
                                        @if (platform.Name != null)
                                        {
                                            <li class=my-1>
                                                <Button Icon="times" Variant="Danger"
                                                    OnClick="@(e => RemovePlatform(platform.Name))"></Button>
                                                @platform.Name
                                            </li>
                                        }
                                    }
                                </ul>
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
                <CardFooter>
                    <NavLink href=@($"shows/{ShowId}/add-platform")>
                        <Button Variant="Primary">
                            <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Add Platform
                        </Button>
                    </NavLink>
                </CardFooter>
            </Card>
        </div>

        <div class="clr-col-lg-6 clr-col-12">
            <Card>
                <CardHeader>
                    <i class="bi bi-people-fill" aria-hidden="true"></i> Users
                </CardHeader>
                <CardBody>
                    <CardBlock>
                        <CardText>
                            @if (showUsers != null)
                            {
                                <ul>
                                    @foreach (var user in showUsers)
                                    {
                                        @if (user.Username != null)
                                        {
                                            <li class=my-1>
                                                <Button Icon="times" Variant="Danger"
                                                    OnClick="@(e => RemoveUser(user.Username))"></Button> @user.Username
                                            </li>
                                        }
                                    }
                                </ul>
                            }
                        </CardText>
                    </CardBlock>
                </CardBody>
                <CardFooter>
                    <NavLink href=@($"shows/{ShowId}/add-user")>
                        <Button Variant="Primary">
                            <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Add User
                        </Button>
                    </NavLink>
                </CardFooter>
            </Card>
        </div>
        <div class="clr-col-12">
            <Card>
                <CardHeader>
                    <i class="bi bi-info-circle-fill" aria-hidden="true"></i> Danger Zone
                </CardHeader>
                <CardBody>
                    <CardBlock>
                        <CardText>
                            Do you want to delete show?
                        </CardText>
                    </CardBlock>
                </CardBody>
                <CardFooter>
                    <Button Variant="Danger" OnClick="e => isModalVisible = true">
                        <i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Delete Show
                    </Button>
                </CardFooter>
            </Card>
        </div>
    </div>

    <Modal @bind-Open="isModalVisible" Size="ModalSize.Small">
    <ModalTitle>Are you sure?</ModalTitle>
    <ModalFooter>
        <Button Variant="Danger" OnClick="DeleteShowAsync">Delete</Button>
        <Button Variant="Outline" OnClick="e => isModalVisible = false">Cancel</Button>
    </ModalFooter>
</Modal>
}

@code
{
    [Parameter] public string? ShowId { get; set; }
    private Show? show { get; set; }
    private ICollection<Platform> showPlatforms = new List<Platform>();
    private ICollection<User> showUsers = new List<User>();
    private bool isModalVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            await LoadShowDetailsAsync(context);
            await LoadShowPlatformsAsync(context);
            await LoadShowUsersAsync(context);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading show data: {ex.Message}");
        }
    }

    private async Task LoadShowDetailsAsync(CineStreamContext context)
    {
        show = await context.Shows!.FirstOrDefaultAsync(c => c.ShowId.ToString() == ShowId);
    }

    private async Task LoadShowPlatformsAsync(CineStreamContext context)
    {
        if (show == null) return;

        var showPlatformsList = await context.PlatformShows!
        .Where(c => c.ShowId == show.ShowId)
        .ToListAsync();

        foreach (var showPlatform in showPlatformsList)
        {
            var platform = await context.Platforms!.FirstOrDefaultAsync(c => c.PlatformId == showPlatform.PlatformId);
            if (platform != null) showPlatforms.Add(platform);
        }
    }

    private async Task LoadShowUsersAsync(CineStreamContext context)
    {
        if (show == null) return;

        var showUsersList = await context.UserShows!
        .Where(c => c.ShowId == show.ShowId)
        .ToListAsync();

        foreach (var showUser in showUsersList)
        {
            var user = await context.Users!.FirstOrDefaultAsync(c => c.UserId == showUser.UserId);
            if (user != null) showUsers.Add(user);
        }
    }
    private async Task DeleteShowAsync()
    {
        if (show == null) return;

        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            // Delete all user shows of this show
            var showUsersList = await context.UserShows!.Where(c => c.ShowId == show.ShowId).ToListAsync();

            context.UserShows!.RemoveRange(showUsersList);
            // Delete all platform shows of this show
            var showPlatformsList = await context.PlatformShows!.Where(c => c.ShowId == show.ShowId).ToListAsync();
            context.PlatformShows!.RemoveRange(showPlatformsList);
            // Delete the show
            context.Shows!.Remove(show);
            await context.SaveChangesAsync();
            NavManager.NavigateTo("/shows");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting show: {ex.Message}");
        }
    }

    private async Task RemovePlatform(string showTitle)
    {
        // Remove platform from show
        using var context = await DbFactory.CreateDbContextAsync();
        var platform = await context.Platforms!.FirstOrDefaultAsync(c => c.Name == showTitle);
        if (platform == null || show == null) return;
        var showPlatform = await context.PlatformShows!.FirstOrDefaultAsync(c => c.PlatformId == platform.PlatformId && c.ShowId
        ==
        show.ShowId);
        if (showPlatform == null) return;
        context.PlatformShows!.Remove(showPlatform);
        await context.SaveChangesAsync();
        // Reload show platforms
        showPlatforms.Clear();
        await LoadShowPlatformsAsync(context);
    }

    private async Task RemoveUser(string username)
    {
        // Remove user from show
        using var context = await DbFactory.CreateDbContextAsync();
        var user = await context.Users!.FirstOrDefaultAsync(c => c.Username == username);
        if (user == null || show == null) return;
        var showUser = await context.UserShows!.FirstOrDefaultAsync(c => c.UserId == user.UserId && c.ShowId == show.ShowId);
        if (showUser == null) return;
        context.UserShows!.Remove(showUser);
        await context.SaveChangesAsync();
        // Reload show users
        showUsers.Clear();
        await LoadShowUsersAsync(context);
    }
}
