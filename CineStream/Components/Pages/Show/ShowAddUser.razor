@page "/shows/{ShowId}/add-user"
@using Microsoft.EntityFrameworkCore
@using CineStream.Data

@inject IDbContextFactory<CineStreamContext> DbFactory
@inject NavigationManager NavManager

<PageTitle>Add User</PageTitle>

<h1><i class="bi bi-plus-circle-fill" aria-hidden="true"></i> Add User</h1>

<div class="clr-row">
    <div class="clr-col-lg-6 clr-col-12">
        <Card>
            <CardBody>
                <CardBlock>
                    <Form Model="selectedUser" OnValidSubmit="HandleValidSubmit" Layout="FormLayout.Vertical">
                        <DataAnnotationsValidator />

                        <InputCombobox Label="Select User" TItem="User" Items="@availableUsers"
                            @bind-SelectedItem="selectedUser" ItemToText="o => o?.Username"
                            ValidationFor="() => selectedUser" HelpText="A user selection is required.">
                            <ItemTemplate Context="user">
                                @user.Username
                            </ItemTemplate>
                        </InputCombobox>

                        <Button class="mt-3" Variant="Success" type="submit">Submit</Button>
                    </Form>
                </CardBlock>
            </CardBody>
        </Card>
    </div>
</div>

@code {
    [Parameter] public string? ShowId { get; set; }
    private ICollection<User>? availableUsers { get; set; }
    private User selectedUser = new User();

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableUsersAsync();
    }

    private async Task LoadAvailableUsersAsync()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            var allUsers = await context.Users!.ToListAsync();
            var showUsers = await context.UserShows!
            .Where(c => c.ShowId.ToString() == ShowId)
            .Select(c => c.UserId)
            .ToListAsync();

            availableUsers = allUsers
            .Where(u => !showUsers.Contains(u.UserId))
            .ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            var showUser = new UserShow
                {
                    UserId = selectedUser.UserId,
                    ShowId = int.Parse(ShowId ?? "0"),
                    CreatedAt = DateTime.Now
                };
            context.UserShows?.Add(showUser);
            await context.SaveChangesAsync();
            NavManager.NavigateTo($"/shows/{ShowId}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error adding user to show: {ex.Message}");
        }
    }
}