@page "/platforms/{PlatformId}/users"
@using Microsoft.EntityFrameworkCore
@using CineStream.Data

@inject IDbContextFactory<CineStreamContext> DbFactory

<PageTitle>Users</PageTitle>

@if ((appPlatform != null) && (appPlatform.Name != null))
{
    <h1><i class="bi bi-people-fill" aria-hidden="true"></i> Users of @appPlatform.Name</h1>
}

@if (appPlatformUsers != null)
{
    <Datagrid Items="AppPlatformUsers">
    <DatagridColumn Title="UserId" TRowData="AppPlatformUser" Field="c => c.UserId.ToString()" CanSort="true"
        CanFilter="true" FilterImmediately="true" />
    <DatagridColumn Title="Username" TRowData="AppPlatformUser" Field="c => c.Username" CanSort="true" CanFilter="true"
        FilterImmediately="true" />
    <DatagridColumn Title="Email" TRowData="AppPlatformUser" Field="c => c.Email" CanSort="true" CanFilter="true"
        FilterImmediately="true" />
    <DatagridColumn Title="SubscriptionDate" TRowData="AppPlatformUser" Field="c => c.SubscriptionDate.ToString()"
        CanSort="true" CanFilter="true" FilterImmediately="true" />
</Datagrid>
}

@code
{
    [Parameter]
    public string? PlatformId { get; set; }
    private Platform? appPlatform { get; set; }
    private ICollection<PlatformUser>? appPlatformUsers { get; set; }
    private ICollection<AppPlatformUser>? AppPlatformUsers { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        using var context = DbFactory.CreateDbContext();

        AppPlatformUsers = new List<AppPlatformUser>();
        appPlatform = await context.Platforms!.FirstOrDefaultAsync(c => c.PlatformId.ToString() == PlatformId);

        var allPlatformUsers = await context.PlatformUsers!.ToListAsync();
        var platformUsers = allPlatformUsers.Where(c => c.PlatformId.ToString() == PlatformId).ToList();
        var allUsers = await context.Users!.ToListAsync();
        appPlatformUsers = platformUsers.Where(c => c.PlatformId.ToString() == PlatformId).ToList();


        foreach (var platformUser in appPlatformUsers)
        {
            var user = await context.Users!.FirstOrDefaultAsync(u => u.UserId == platformUser.UserId);
            if (user != null)
            {
                var appPlatformUser = new AppPlatformUser
                    {
                        UserId = user.UserId,
                        Username = user.Username,
                        Email = user.Email,
                        SubscriptionDate = platformUser.SubscriptionDate
                    };
                AppPlatformUsers.Add(appPlatformUser);
            }
        }

    }

}
